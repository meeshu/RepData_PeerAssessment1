?iris
dimnames(iris3)
head(iris3)
head(iris)
colmeans(iris3,dims=2)
colMeans(iris3,dims=2)
tapply(iris$Sepal.Length,Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
?colMeans
colMeans(iris3,dims=c(2,3))
colMeans(iris3,dims=c(1,2))
colMeans(iris3,dims=2)
.colMeans(iris3,dims=3)
colMeans(iris3,dims=3)
dim(iris3)
?iris3
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?diff
dimnams(tapply(mtcars$mpg, mtcars$cyl, mean))
dimnames(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)$8-tapply(mtcars$mpg, mtcars$cyl, mean)$4
tapply(mtcars$mpg, mtcars$cyl, mean)$"8"
lapply(tapply(mtcars$mpg, mtcars$cyl, mean),diff,lag=2)
lapply(tapply(mtcars$mpg, mtcars$cyl, mean),diff)
class(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[,1]
dim(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[1,]
tapply(mtcars$mpg, mtcars$cyl, mean)
calcdiff<-tapply(mtcars$mpg, mtcars$cyl, mean)
calcdiff
calcdiff[3]
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[3]-tapply(mtcars$mpg, mtcars$cyl, mean)[2])
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[3]-tapply(mtcars$mpg, mtcars$cyl, mean)[1])
debug(ls)
ls
abs(tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1])
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(swirl)
ls()
rm(list=ls())
swirl()
sirl()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-(z/my_sqrt)
my_div<-z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
?file.renamw
?file.rename
file.rename("mytest.R","mytest2.R")
?file.copy
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("folder1","folder2",fsep="/")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
?unlink
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(1,20,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("my","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Meeshu")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-(c(y,z),100)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect<-c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
True==True
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My not really first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
submit()
remainder(11, 5)
submit()
remainder(divisor = 11, num= 5)
remainder(4, div = 2)
args(remainder)
exit()
exit
help
help()
bye()
library(swirl)
rm(list=ls())
swirl()
exit
bye()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,unique(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plant$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
bye()
install.packages("kernlab")
library(kernlab)
str(spam)
data(spam)
str(spam)
str(spam[,1:5])
install.packages("ProjectTemplate")
library(swirl)
rm(list=ls())
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm()
bye
bye()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
axis()
?axis
?text
?lines
?llines
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library.packages("ggplot2")
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?ggplot2
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?qplot
package.install("xtable")
packages.install("xtable")
install.packages("xtable")
setwd("C:/data")
setwd("C:/data/RepData_PeerAssessment1")
activity<-fread("activity.csv")
library(read.table)
library(data.table)
activity<-fread("activity.csv")
str(activity)
?as.Date
activity$date<-as.Date(activity$date,"%Y-%m-%d")
str(activity)
summary(activity)
activityclean<-activity[!=NA,]
activity$steps!=NA
activity[activity$steps!=NA]
activity[activity$steps!=NA,]
activity<-fread("activity.csv")
activity$date<-as.Date(activity$date,"%Y-%m-%d")
?data.table
?mean
activityclean<-activity[!is.na(activity$steps),]
summary(activityclean)
sumsteps<-activityclean[,sum(steps),by=date]
sumstepa
sumsteps
colnames(sumsteps)<-c("date","total_steps")
sumsteps
?setnames
setnames(sumsteps,c("date","total_steps"),c("date","tot_steps"))
sumsteps
hist(tot_steps)
hist(sumsteps$tot_steps)
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day")
library(ggplot2)
qplot(tot_steps,sumsteps,fill="steelblue")
?qplot
qplot(tot_steps,as.data.frame(sumsteps),fill="steelblue")
qplot(tot_steps,data=as.data.frame(sumsteps),fill="steelblue")
qplot(tot_steps,data=as.data.frame(sumsteps))
?qpolt
?qplot
qplot(tot_steps,data=as.data.frame(sumsteps),colour="steelblue")
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day")
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue")
?hist
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue",border="steelblue")
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue",border="gray")
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue",border="ashgray")
?colour
?colorspace
?colourspace
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue",border="darkgray")
hist(sumsteps$tot_steps,main="Frequency of total number of steps in a day",xlab="Total no. of steps per day",col="steelblue",border="gray")
mean(sumsteps$tot_steps)
median(sunsteps$tot_steps)
median(sumsteps$tot_steps)
print(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)))
?table
print(as.table(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),row.names=c("Mean","Median")))
print(as.data.frame(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),row.names=c("Mean","Median")))
print(as.table(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),colnames=c("Mean","Median")))
print(as.table(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),col.names=c("Mean","Median")))
print(as.data.frame(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),col.names=c("Mean","Median")))
print(as.data.frame(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),colnames=c("Mean","Median")))
print(as.data.frame(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),1,1,colnames=c("Mean","Median")))
?as.data.frame
print(data.frame(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),1,1,colnames=c("Mean","Median")))
print(matrix(c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),1,1,colnames=c("Mean","Median")))
?matrix
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=1,dimnames=list(,c("Mean","Median")))
;
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=1,dimnames=list(,c("Mean","Median"))))
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=1,dimnames=list(NULL,c("Mean","Median"))))
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=1,dimnames=list(1,c("Mean","Median"))))
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=1))
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=2,dimnames=list(1,c("Mean","Median"))))
print(matrix(data=c(mean(sumsteps$tot_steps),median(sumsteps$tot_steps)),nrow=1,ncol=2,dimnames=list(" ",c("Mean","Median"))))
>fig.height
?fig.height
??fig.height
activityclean[,by=date]
activityclean
activity
str(activityclean)
summary(activityclean)
sumsteps
str(activityclean)
avginterval<-activityclean[,avg(steps),by=interval]
avginterval<-activityclean[,mean(steps),by=interval]
avginterval
summary(avgintervl)
summary(avginterval)
activityclean$interval
unique(activityclean$interval)
avginterval<-activityclean[,mean(steps),by=interval]
summary(avginterval)
setnames(avginterval,c("interval","V1"),c("interval","avg_steps"))
summary(avginterval)
plot(interval,avg_steps,type="l",main="Avg. number of steps across intervals")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals")
?xlim
?plot
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xaxp=c(0,2355,5),xlab="Intervals",ylab="Avg. number of steps")
par("xlog")
?xlim
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlim=c(0,2355,5),xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlim=(0,2355,5),xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlim=c(0,2355),xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
?max
?point
?points
max(avginterval$avg_steps)
print(which.max(avginterval$avg_steps))
print(avginterval[which.max(avginterval$avg_steps),])
points(835,206.1698)
points(835,206.1698,pch=25)
points(835,206.1698,pch=28)
?pch
points(835,206.1698,pch=15,fill="Red")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
points(835,206.1698,pch=15,col="Red")
points(835,206.1698,pch=16,col="steelblue")
plot(avginterval$interval,avginterval$avg_steps,type="l",main="Avg. number of steps across intervals for all days",xlab="Intervals",ylab="Avg. number of steps")
points(835,206.1698,pch=16,col="red")
summary(activity)
sum(!complete.cases(activity))
sum(!complete.cases(activity))
median(,activity$steps,by=date)
?lapply
?mapply
examples(mapply)
example(mapply)
activityrepNA<-activity[,steps := ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=date]
summary(activity)
summary(activityrepNA)
activity[,steps := ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=date]
summary(activityrepNA)
summary(activity)
?median
activity[,steps <- ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=date]
summary(activity)
setkey(activity,date)
activity[,steps <- ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=date]
summary(activity)
?ave
?with
activity$steps[is.na(activity$steps)] <- with(activity, ave(steps,date, FUN = function(x) median(x, na.rm = TRUE)))[is.na(activity$steps)]
summary(activity)
activity
activity$steps[is.na(activity$steps)] <- with(activity, ave(steps,as.factor(date), FUN = function(x) median(x, na.rm = TRUE)))[is.na(activity$steps)]
summary(activity)
